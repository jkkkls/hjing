package sync_conf

import (
	"bytes"
	"fmt"
	"os"
	"strings"

	"github.com/jkkkls/hjing/utils"
	"github.com/pkg/errors"
	"github.com/xuri/excelize/v2"
)

func ExportStruct2(inDirs []string, pkgName string) ([]byte, error) {
	var buffer, publicBuff bytes.Buffer
	buffer.Write([]byte("//Code generated by xlsx2proto. DO NOT EDIT.\n"))
	buffer.Write([]byte("\n"))
	buffer.Write([]byte(fmt.Sprintf("package %v\n\n", pkgName)))

	publicBuff.Write([]byte("type Configs struct {\n"))

	for _, v := range inDirs {
		files, err := os.ReadDir(v)
		if err != nil {
			continue
		}

		// 开始导出
		for _, f := range files {
			if f.IsDir() {
				continue
			}
			if !strings.HasSuffix(f.Name(), ".xlsx") {
				continue
			}
			name, comment := extractGormTag(f.Name())
			buff, err := exportXLSX2Proto(v+"/"+f.Name(), name, comment)
			if err != nil {
				return nil, err
			}

			buffer.Write(buff)

			upName := utils.CloseString(name)
			publicBuff.Write([]byte(fmt.Sprintf("%v []%v %c%v%c //%v\n", upName, upName, '`', fmt.Sprintf("json:\"%v,omitempty\"", name), '`', comment)))

		}
	}

	publicBuff.Write([]byte("}\n\n"))
	buffer.Write(publicBuff.Bytes())

	return buffer.Bytes(), nil
}

func exportXLSX2Proto(file, name, comment string) ([]byte, error) {
	f, err := excelize.OpenFile(file)
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("file: %v", file))
	}

	return exportSheet2Proto(name, comment, 0, f)
}

var typeMap = map[string]string{
	"int":     "int64",
	"[]int":   "[]int64",
	"[][]int": "[][]int64",
	"str":     "string",
	"[]str":   "[]string",
	"[][]str": "[][]string",
}

func exportSheet2Proto(sname, comment string, sheetIndex int, f *excelize.File) ([]byte, error) {
	upName := utils.CloseString(sname)

	var buffer bytes.Buffer
	buffer.Write([]byte(fmt.Sprintf("// %v %v\n", upName, comment)))
	buffer.Write([]byte(fmt.Sprintf("type %v struct {\n", upName)))

	name := f.GetSheetName(sheetIndex)
	index := 1
	for {
		x, _ := excelize.CoordinatesToCellName(index, 1)
		comment, _ := f.GetCellValue(name, x)
		x, _ = excelize.CoordinatesToCellName(index, 2)
		fieldType, _ := f.GetCellValue(name, x)
		x, _ = excelize.CoordinatesToCellName(index, 3)
		fieldName, _ := f.GetCellValue(name, x)

		if fieldType == "" {
			break
		}

		buffer.Write([]byte(fmt.Sprintf("%v %v %c%v%c //%v\n", utils.CloseString(fieldName), typeMap[fieldType], '`', fmt.Sprintf("json:\"%v,omitempty\"", fieldName), '`', comment)))

		index++
	}

	buffer.Write([]byte("}\n\n"))

	return buffer.Bytes(), nil
}
